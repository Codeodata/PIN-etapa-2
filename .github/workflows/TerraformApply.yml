name: Terraform Apply

on:
  push: # Se ejecuta el workflow en cada push al repositorio

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

defaults:
  run:
    shell: bash
    working-directory: ./modules

jobs:
  terraform_apply:
    name: "Apply Terraform Code Changes"
    runs-on: ubuntu-latest # Se ejecuta en un runner con Ubuntu
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1 # Se obtiene el código del repositorio

      - name: Install Terraform
        env:
          TERRAFORM_VERSION: "0.12.15" # Versión de Terraform a instalar
        run: |
          wget https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_$TERRAFORM_VERSION_linux_amd64.zip
          unzip terraform_$TERRAFORM_VERSION_linux_amd64.zip
          sudo mv terraform /usr/local/bin/ # Se mueve el binario de Terraform a un directorio accesible

      - name: Verify Terraform version
        run: terraform --version # Se verifica la versión instalada de Terraform

      - name: Terraform Init
        run: terraform init -input=false # Inicializa Terraform y descarga los proveedores necesarios
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check # Verifica que el código esté bien formateado
      
      - name: Terraform Validation
        run: terraform validate # Valida la configuración de Terraform
      
      - name: Terraform Plan
        id: plan
        run: terraform plan --no-color -input=false -out planfile
        continue-on-error: true
      
      - name: Check Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        if: steps.plan.outcome == 'success'
        run: terraform apply -auto-approve -input=false # Aplica los cambios sin pedir confirmación
